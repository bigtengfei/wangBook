# 版本
version: '1.0.0'

# 服务列表 
services:
  # 后端
  after-end:
    # 根据该目录下的Dockerfile构建
    build:
      context: ../after-end
      dockerfile: Dockerfile
    # 指定构建生成的镜像的名称，与build指令一起存在的话，这个image就是指定构建好镜像的名称以及标签
    image: after-end:v1.0
    # 指定容器名称为after-end
    container_name: after-end
    # 因为都连接到了docker定义的网络，通过容器名:port进行访问容器，所以不用暴露端口也行
    # 这里暴漏端口是为了逻辑清洗
    ports:
      - 8888:8888
    # 关联的网络
    networks:
      - frontend
      - backend
    # 依赖于db与cache服务
    depends_on:
      - db
      - cache

  # 前端用户端
  front-client:
    build: ../client
    image: front-client:v1.0
    container_name: front-client
    ports:
      - 81:80
    volumes:
      - ./nginx/client/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - frontend
    # 依赖于after-end服务
    depends_on:
      - after-end

  # 前端管理端
  front-manage:
    build: ../manage
    image: front-manage:v1.0
    container_name: front-manage
    ports:
      - 82:80
    volumes:
      - ./nginx/manage/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - frontend
    # 依赖于after-end服务
    depends_on:
      - after-end

  # 数据库
  db:
    # 依赖镜像创建容器，当镜像不存在时，便从远程下载
    image: mysql:8.0.22
    container_name: mysql8
    ports:
      - 4406:3306
    volumes:
      - ./mysql/log:/var/log/mysql
      - ./mysql/data:/var/lib/mysql
      - ./mysql/conf:/etc/mysql/conf.d
    environment:
      - MYSQL_ROOT_PASSWORD=123456
    networks:
      - backend
  
  # redis缓存
  cache:
    image: redis:6.2.12
    container_name: redis6
    # 运行时指令，指定配置文件
    command: redis-server /etc/redis/redis.conf
    volumes:
      - ./redis/data:/data
      - ./redis/conf/redis.conf:/etc/redis/redis.conf
    ports:
      - 7379:6379
    networks:
      - backend

# 自定义docker网络
networks:
  frontend:
  backend:



